<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
           http://www.springframework.org/schema/task  
           http://www.springframework.org/schema/task/spring-task-4.2.xsd">
	<!-- 读取指定位置的db.properties的信息 -->
	<task:annotation-driven />
	<context:annotation-config />
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/db.properties"></property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	<!-- dataSource 配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbcUrl}" />
		<property name="username" value="${user}" />
		<property name="password" value="${password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${iniSize}" />
		<property name="minIdle" value="${maxIdle}" />
		<property name="maxActive" value="${maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
	</bean>
	
	<!--oracle dataSource 配置 -->
	<bean id="oracledataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${oracle.jdbcUrl}" />
		<property name="username" value="${oracle.user}" />
		<property name="password" value="${oracle.password}" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:com/dynastech/**/*Mapper.xml" />
		<property name="dataSource" ref="dataSource"></property>
		<!-- <property name="plugins"> <list> <bean class="com.github.miemiedev.mybatis.paginator.OffsetLimitInterceptor"> 
			<property name="dialectClass" value="com.github.miemiedev.mybatis.paginator.dialect.SQLServerDialect"></property> 
			</bean> </list> </property> -->
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dynastech.**.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<bean id="oracleSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:com/data/**/*Mapper.xml" />
		<property name="dataSource" ref="oracledataSource"></property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.data.**.mapper" />
		<property name="sqlSessionFactoryBeanName" value="oracleSqlSessionFactory" />
	</bean>
	<!-- end mybatis配置 -->

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="usePool" value="true"></property>
		<property name="hostName" value="${application.redis.server}"></property>
		<property name="port" value="${application.redis.port}"></property>
		<property name="database" value="0"></property>
		<property name="password" value="${application.redis.password}"></property>
		<property name="timeout" value="${application.redis.timeout}"></property>
		<property name="poolConfig">
			<bean class="redis.clients.jedis.JedisPoolConfig">
				<property name="maxIdle" value="${application.redis.pool.maxIdel}"></property>
				<property name="minEvictableIdleTimeMillis"
					value="${application.redis.pool.minEvictableIdleTimeMillis}"></property>
				<property name="numTestsPerEvictionRun"
					value="${application.redis.pool.numTestsPerEvictionRun}" />
				<property name="timeBetweenEvictionRunsMillis"
					value="${application.redis.pool.timeBetweenEvictionRunsMillis}" />
			</bean>
		</property>
	</bean>

	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"></property>
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>
</beans>